{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5003ad34c0e492ce13ebf3ce875e6fe9f7df470676ad3a39f944e148ecdb85d3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "937047",
    "logsBloom": "0x
    "blockHash": "0x7c8c3d2f6169b12d03c0e600ea9feccf44b7fe12ee5941e26992acf1c4c7b715",
    "transactionHash": "0x5003ad34c0e492ce13ebf3ce875e6fe9f7df470676ad3a39f944e148ecdb85d3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "937047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "788cfecb9387b11ad1715c31ed769497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.7;\\r\\n// 2. Imports\\r\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\r\\nimport './PriceConverter.sol';\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author Patrick Collins\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n    address private immutable i_owner;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeed) {\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            'You need to spend more ETH!'\\r\\n        );\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // Transfer vs call vs Send\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}('');\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        // mappings can't be in memory, sorry!\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}('');\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets the amount that an address has funded\\r\\n     *  @param fundingAddress the address of the funder\\r\\n     *  @return the amount funded\\r\\n     */\\r\\n    function getAddressToAmountFunded(\\r\\n        address fundingAddress\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    // function getOwner() public view returns (address) {\\r\\n    //     return i_owner;\\r\\n    // }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x493c45f6db2490b27e7b86c8cf38cfcc9628d9da7b5a9a4c73b9cb92305f6274\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    // call it get flatConversionRate, since it assumes something about decimals\\r\\n    // It wouldn't work for every aggregator\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x14a45ba941a4614187afe65d6e31674a0acd2dc8759c4d05407bc8432ab82683\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011103803806200111083398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051610f9062000180600039600081816101c80152818161035b01528181610564015261075a0152610f906000f3fe6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461014057610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610a0e565b61017d565b6040516100a99190610a54565b60405180910390f35b3480156100be57600080fd5b506100c76101c6565b005b3480156100d557600080fd5b506100de6103f0565b6040516100eb9190610a54565b60405180910390f35b34801561010057600080fd5b506101096103fd565b6040516101169190610ace565b60405180910390f35b610127610427565b005b34801561013557600080fd5b5061013e610562565b005b34801561014c57600080fd5b5061016760048036038101906101629190610b15565b6107f0565b6040516101749190610b51565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102f65760008082815481106102705761026f610b6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ee90610bca565b91505061024e565b50600067ffffffffffffffff81111561031257610311610c12565b5b6040519080825280602002602001820160405280156103405781602001602082028036833780820191505090505b5060009080519060200190610356929190610904565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161039d90610c72565b60006040518083038185875af1925050503d80600081146103da576040519150601f19603f3d011682016040523d82523d6000602084013e6103df565b606091505b50509050806103ed57600080fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610466600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461083790919063ffffffff16565b10156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90610ce4565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104f69190610d04565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b5050505050905060005b81518110156106f557600082828151811061069257610691610b6c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106ed90610bca565b915050610674565b50600067ffffffffffffffff81111561071157610710610c12565b5b60405190808252806020026020018201604052801561073f5781602001602082028036833780820191505090505b5060009080519060200190610755929190610904565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161079c90610c72565b60006040518083038185875af1925050503d80600081146107d9576040519150601f19603f3d011682016040523d82523d6000602084013e6107de565b606091505b50509050806107ec57600080fd5b5050565b600080828154811061080557610804610b6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061084383610873565b90506000670de0b6b3a7640000858361085c9190610d38565b6108669190610da9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190610e67565b5050509150506402540be400816108fc9190610ee2565b915050919050565b82805482825590600052602060002090810192821561097d579160200282015b8281111561097c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610924565b5b50905061098a919061098e565b5090565b5b808211156109a757600081600090555060010161098f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109db826109b0565b9050919050565b6109eb816109d0565b81146109f657600080fd5b50565b600081359050610a08816109e2565b92915050565b600060208284031215610a2457610a236109ab565b5b6000610a32848285016109f9565b91505092915050565b6000819050919050565b610a4e81610a3b565b82525050565b6000602082019050610a696000830184610a45565b92915050565b6000819050919050565b6000610a94610a8f610a8a846109b0565b610a6f565b6109b0565b9050919050565b6000610aa682610a79565b9050919050565b6000610ab882610a9b565b9050919050565b610ac881610aad565b82525050565b6000602082019050610ae36000830184610abf565b92915050565b610af281610a3b565b8114610afd57600080fd5b50565b600081359050610b0f81610ae9565b92915050565b600060208284031215610b2b57610b2a6109ab565b5b6000610b3984828501610b00565b91505092915050565b610b4b816109d0565b82525050565b6000602082019050610b666000830184610b42565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bd582610a3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c0757610c06610b9b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c5c600083610c41565b9150610c6782610c4c565b600082019050919050565b6000610c7d82610c4f565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610cce601b83610c87565b9150610cd982610c98565b602082019050919050565b60006020820190508181036000830152610cfd81610cc1565b9050919050565b6000610d0f82610a3b565b9150610d1a83610a3b565b9250828201905080821115610d3257610d31610b9b565b5b92915050565b6000610d4382610a3b565b9150610d4e83610a3b565b9250828202610d5c81610a3b565b91508282048414831517610d7357610d72610b9b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610db482610a3b565b9150610dbf83610a3b565b925082610dcf57610dce610d7a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610df981610dda565b8114610e0457600080fd5b50565b600081519050610e1681610df0565b92915050565b6000819050919050565b610e2f81610e1c565b8114610e3a57600080fd5b50565b600081519050610e4c81610e26565b92915050565b600081519050610e6181610ae9565b92915050565b600080600080600060a08688031215610e8357610e826109ab565b5b6000610e9188828901610e07565b9550506020610ea288828901610e3d565b9450506040610eb388828901610e52565b9350506060610ec488828901610e52565b9250506080610ed588828901610e07565b9150509295509295909350565b6000610eed82610e1c565b9150610ef883610e1c565b9250828202610f0681610e1c565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f3e57610f3d610b9b565b5b8282058414831517610f5357610f52610b9b565b5b509291505056fea2646970667358221220580b1d42b40ce0836f1badbaebb574deec9620b55517d68f91fa0b40f3989a8d64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd146100f4578063b60d42881461011f578063be2693f014610129578063d7b4750c1461014057610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610a0e565b61017d565b6040516100a99190610a54565b60405180910390f35b3480156100be57600080fd5b506100c76101c6565b005b3480156100d557600080fd5b506100de6103f0565b6040516100eb9190610a54565b60405180910390f35b34801561010057600080fd5b506101096103fd565b6040516101169190610ace565b60405180910390f35b610127610427565b005b34801561013557600080fd5b5061013e610562565b005b34801561014c57600080fd5b5061016760048036038101906101629190610b15565b6107f0565b6040516101749190610b51565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102f65760008082815481106102705761026f610b6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ee90610bca565b91505061024e565b50600067ffffffffffffffff81111561031257610311610c12565b5b6040519080825280602002602001820160405280156103405781602001602082028036833780820191505090505b5060009080519060200190610356929190610904565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161039d90610c72565b60006040518083038185875af1925050503d80600081146103da576040519150601f19603f3d011682016040523d82523d6000602084013e6103df565b606091505b50509050806103ed57600080fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610466600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461083790919063ffffffff16565b10156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90610ce4565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104f69190610d04565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b5050505050905060005b81518110156106f557600082828151811061069257610691610b6c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106ed90610bca565b915050610674565b50600067ffffffffffffffff81111561071157610710610c12565b5b60405190808252806020026020018201604052801561073f5781602001602082028036833780820191505090505b5060009080519060200190610755929190610904565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161079c90610c72565b60006040518083038185875af1925050503d80600081146107d9576040519150601f19603f3d011682016040523d82523d6000602084013e6107de565b606091505b50509050806107ec57600080fd5b5050565b600080828154811061080557610804610b6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061084383610873565b90506000670de0b6b3a7640000858361085c9190610d38565b6108669190610da9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190610e67565b5050509150506402540be400816108fc9190610ee2565b915050919050565b82805482825590600052602060002090810192821561097d579160200282015b8281111561097c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610924565b5b50905061098a919061098e565b5090565b5b808211156109a757600081600090555060010161098f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109db826109b0565b9050919050565b6109eb816109d0565b81146109f657600080fd5b50565b600081359050610a08816109e2565b92915050565b600060208284031215610a2457610a236109ab565b5b6000610a32848285016109f9565b91505092915050565b6000819050919050565b610a4e81610a3b565b82525050565b6000602082019050610a696000830184610a45565b92915050565b6000819050919050565b6000610a94610a8f610a8a846109b0565b610a6f565b6109b0565b9050919050565b6000610aa682610a79565b9050919050565b6000610ab882610a9b565b9050919050565b610ac881610aad565b82525050565b6000602082019050610ae36000830184610abf565b92915050565b610af281610a3b565b8114610afd57600080fd5b50565b600081359050610b0f81610ae9565b92915050565b600060208284031215610b2b57610b2a6109ab565b5b6000610b3984828501610b00565b91505092915050565b610b4b816109d0565b82525050565b6000602082019050610b666000830184610b42565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bd582610a3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c0757610c06610b9b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c5c600083610c41565b9150610c6782610c4c565b600082019050919050565b6000610c7d82610c4f565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610cce601b83610c87565b9150610cd982610c98565b602082019050919050565b60006020820190508181036000830152610cfd81610cc1565b9050919050565b6000610d0f82610a3b565b9150610d1a83610a3b565b9250828201905080821115610d3257610d31610b9b565b5b92915050565b6000610d4382610a3b565b9150610d4e83610a3b565b9250828202610d5c81610a3b565b91508282048414831517610d7357610d72610b9b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610db482610a3b565b9150610dbf83610a3b565b925082610dcf57610dce610d7a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610df981610dda565b8114610e0457600080fd5b50565b600081519050610e1681610df0565b92915050565b6000819050919050565b610e2f81610e1c565b8114610e3a57600080fd5b50565b600081519050610e4c81610e26565b92915050565b600081519050610e6181610ae9565b92915050565b600080600080600060a08688031215610e8357610e826109ab565b5b6000610e9188828901610e07565b9550506020610ea288828901610e3d565b9450506040610eb388828901610e52565b9350506060610ec488828901610e52565b9250506080610ed588828901610e07565b9150509295509295909350565b6000610eed82610e1c565b9150610ef883610e1c565b9250828202610f0681610e1c565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f3e57610f3d610b9b565b5b8282058414831517610f5357610f52610b9b565b5b509291505056fea2646970667358221220580b1d42b40ce0836f1badbaebb574deec9620b55517d68f91fa0b40f3989a8d64736f6c63430008130033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 330,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 334,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 337,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}